## Run the t-SNE algorithm and store the results into an object called tsne_results
tsne_results <- Rtsne(scaled_dat[,-1], perplexity=30, check_duplicates = FALSE)
#THE DEFULAT IS 1000 ITERS
#plot(tsne_results$Y, col = colors[scaled_dat$id], bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
plot(tsne_results$Y, col = "black", bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
#all groupes
library(stringr)
library(openxlsx)
dirs <- as.data.frame(read.xlsx("F:/allGroups/female_dirs.xlsx"))
num_of_pop<<-nrow(dirs)
dir=as.data.frame(lapply(structure(.Data=1:1,.Names=1:1),function(x) X = numeric(num_of_pop)))
for (i in 1:num_of_pop){
dir[i,1]<-dirs$groupNameDir[i]
}
groupsNames <<- as.character(basename(dirs$groupNameDir))
#chnage the dir values so it would be readable
dir$X1<-gsub("\\\\", "/", dir$X1)
for(i in 1:num_of_pop){
dir[i,1]<-str_trim(dir[i,1], side = c("right"))
}
library("dplyr")
library("stringr")
index<-0
for(i in 1:num_of_pop){
index<-index+1
setwd(dir[i,1])
all_features<-read.csv("combined_per_fly.csv")
#getting the colom names - getting the feature name e.g aggregation
feature_names<-all_features %>%
select(starts_with('file'))
#taking the first row of it and removing the col names
names_data_frame<-as.data.frame(t(feature_names[1,]))
rownames(names_data_frame)<-(NULL)
colnames(names_data_frame)<-c("feature_name")
#replace the feature names so they won't end with .mat ending
names_data_frame$feature_name<- str_replace(names_data_frame$feature_name ,".mat", "")
#converting them to list
names_in_list<-as.list(names_data_frame$feature_name)
all_features_names<-all_features$dir
all_features_names<-as.data.frame(all_features_names)
colnames(all_features_names)<-c("id")
#taking the movie name and calling it id
#taking only the values
all_features_valus<-all_features %>%
select(starts_with('valu'))
#putting the name of the feature as colom name to the values
colnames(all_features_valus)<-c(names_in_list)
all_features_names<-cbind(all_features_names,all_features_valus)
all_features_names$id<-c(basename(dir[i,1]))
if(index==1){
all_feature_final<-all_features_names
}else{
all_feature_final<-rbind(all_feature_final,all_features_names)
}
#putting factor on the label
all_feature_final$id<-as.factor(all_feature_final$id)
}
#this part was problematic for the random forest
colnames(all_feature_final) <- make.names(colnames(all_feature_final))
#check balance
all_feature_final %>%
count(id) %>%
mutate(prop = n/sum(n))
actuall_data<-all_feature_final[,-1]
scaled_dat <- data.frame(lapply(actuall_data, function(x) scale(x, center = FALSE, scale = max(x, na.rm = TRUE)/1)))
scaled_dat<-cbind(all_feature_final$id,scaled_dat)
names(scaled_dat)[names(scaled_dat) == 'all_feature_final$id'] <- 'id'
library(readr)
library(Rtsne)
rgb_2_hex <- function(r,g,b){
return(rgb(r, g, b, maxColorValue = 1))}
#colors = rainbow(length(unique(scaled_dat$id)))
colors<-c(rgb_2_hex(dirs[1,2],dirs[1,3],dirs[1,4]),rgb_2_hex(dirs[2,2],dirs[2,3],dirs[2,4]),rgb_2_hex(dirs[3,2],dirs[3,3],dirs[3,4]))
#names(colors) = unique(scaled_dat$id)
names(colors)<-c(basename(dirs[1,1]),basename(dirs[2,1]),basename(dirs[3,1]))
#names(colors) = unique(scaled_dat$id)
## Run the t-SNE algorithm and store the results into an object called tsne_results
tsne_results <- Rtsne(scaled_dat[,-1], perplexity=30, check_duplicates = FALSE)
#THE DEFULAT IS 1000 ITERS
#plot(tsne_results$Y, col = colors[scaled_dat$id], bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
plot(tsne_results$Y, col = "black", bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
knitr::opts_chunk$set(echo = TRUE)
#all groupes
library(stringr)
library(openxlsx)
dirs <- as.data.frame(read.xlsx("F:/allGroups/grouped_color.xlsx"))
num_of_pop<<-nrow(dirs)
dir=as.data.frame(lapply(structure(.Data=1:1,.Names=1:1),function(x) X = numeric(num_of_pop)))
for (i in 1:num_of_pop){
dir[i,1]<-dirs$groupNameDir[i]
}
groupsNames <<- as.character(basename(dirs$groupNameDir))
#chnage the dir values so it would be readable
dir$X1<-gsub("\\\\", "/", dir$X1)
for(i in 1:num_of_pop){
dir[i,1]<-str_trim(dir[i,1], side = c("right"))
}
library("dplyr")
library("stringr")
index<-0
for(i in 1:num_of_pop){
index<-index+1
setwd(dir[i,1])
all_features<-read.csv("combined_per_fly.csv")
#getting the colom names - getting the feature name e.g aggregation
feature_names<-all_features %>%
select(starts_with('file'))
#taking the first row of it and removing the col names
names_data_frame<-as.data.frame(t(feature_names[1,]))
rownames(names_data_frame)<-(NULL)
colnames(names_data_frame)<-c("feature_name")
#replace the feature names so they won't end with .mat ending
names_data_frame$feature_name<- str_replace(names_data_frame$feature_name ,".mat", "")
#converting them to list
names_in_list<-as.list(names_data_frame$feature_name)
all_features_names<-all_features$dir
all_features_names<-as.data.frame(all_features_names)
colnames(all_features_names)<-c("id")
#taking the movie name and calling it id
#taking only the values
all_features_valus<-all_features %>%
select(starts_with('valu'))
#putting the name of the feature as colom name to the values
colnames(all_features_valus)<-c(names_in_list)
all_features_names<-cbind(all_features_names,all_features_valus)
all_features_names$id<-c(basename(dir[i,1]))
if(index==1){
all_feature_final<-all_features_names
}else{
all_feature_final<-rbind(all_feature_final,all_features_names)
}
#putting factor on the label
all_feature_final$id<-as.factor(all_feature_final$id)
}
#this part was problematic for the random forest
colnames(all_feature_final) <- make.names(colnames(all_feature_final))
#check balance
all_feature_final %>%
count(id) %>%
mutate(prop = n/sum(n))
actuall_data<-all_feature_final[,-1]
scaled_dat <- data.frame(lapply(actuall_data, function(x) scale(x, center = FALSE, scale = max(x, na.rm = TRUE)/1)))
scaled_dat<-cbind(all_feature_final$id,scaled_dat)
names(scaled_dat)[names(scaled_dat) == 'all_feature_final$id'] <- 'id'
library(readr)
library(Rtsne)
rgb_2_hex <- function(r,g,b){
return(rgb(r, g, b, maxColorValue = 1))}
#colors = rainbow(length(unique(scaled_dat$id)))
colors<-c(rgb_2_hex(dirs[1,2],dirs[1,3],dirs[1,4]),rgb_2_hex(dirs[2,2],dirs[2,3],dirs[2,4]))
#names(colors) = unique(scaled_dat$id)
names(colors)<-c(basename(dirs[1,1]),basename(dirs[2,1]))
#names(colors) = unique(scaled_dat$id)
## Run the t-SNE algorithm and store the results into an object called tsne_results
tsne_results <- Rtsne(scaled_dat[,-1], perplexity=30, check_duplicates = FALSE)
#THE DEFULAT IS 1000 ITERS
#plot(tsne_results$Y, col = colors[scaled_dat$id], bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
plot(tsne_results$Y, col = "black", bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
knitr::opts_chunk$set(echo = TRUE)
#all groupes
library(stringr)
library(openxlsx)
dirs <- as.data.frame(read.xlsx("F:/allGroups/male_dirs.xlsx"))
num_of_pop<<-nrow(dirs)
dir=as.data.frame(lapply(structure(.Data=1:1,.Names=1:1),function(x) X = numeric(num_of_pop)))
for (i in 1:num_of_pop){
dir[i,1]<-dirs$groupNameDir[i]
}
groupsNames <<- as.character(basename(dirs$groupNameDir))
#chnage the dir values so it would be readable
dir$X1<-gsub("\\\\", "/", dir$X1)
for(i in 1:num_of_pop){
dir[i,1]<-str_trim(dir[i,1], side = c("right"))
}
library("dplyr")
library("stringr")
index<-0
for(i in 1:num_of_pop){
index<-index+1
setwd(dir[i,1])
all_features<-read.csv("combined_per_fly.csv")
#getting the colom names - getting the feature name e.g aggregation
feature_names<-all_features %>%
select(starts_with('file'))
#taking the first row of it and removing the col names
names_data_frame<-as.data.frame(t(feature_names[1,]))
rownames(names_data_frame)<-(NULL)
colnames(names_data_frame)<-c("feature_name")
#replace the feature names so they won't end with .mat ending
names_data_frame$feature_name<- str_replace(names_data_frame$feature_name ,".mat", "")
#converting them to list
names_in_list<-as.list(names_data_frame$feature_name)
all_features_names<-all_features$dir
all_features_names<-as.data.frame(all_features_names)
colnames(all_features_names)<-c("id")
#taking the movie name and calling it id
#taking only the values
all_features_valus<-all_features %>%
select(starts_with('valu'))
#putting the name of the feature as colom name to the values
colnames(all_features_valus)<-c(names_in_list)
all_features_names<-cbind(all_features_names,all_features_valus)
all_features_names$id<-c(basename(dir[i,1]))
if(index==1){
all_feature_final<-all_features_names
}else{
all_feature_final<-rbind(all_feature_final,all_features_names)
}
#putting factor on the label
all_feature_final$id<-as.factor(all_feature_final$id)
}
#this part was problematic for the random forest
colnames(all_feature_final) <- make.names(colnames(all_feature_final))
#check balance
all_feature_final %>%
count(id) %>%
mutate(prop = n/sum(n))
actuall_data<-all_feature_final[,-1]
scaled_dat <- data.frame(lapply(actuall_data, function(x) scale(x, center = FALSE, scale = max(x, na.rm = TRUE)/1)))
scaled_dat<-cbind(all_feature_final$id,scaled_dat)
names(scaled_dat)[names(scaled_dat) == 'all_feature_final$id'] <- 'id'
library(readr)
library(Rtsne)
rgb_2_hex <- function(r,g,b){
return(rgb(r, g, b, maxColorValue = 1))}
#colors = rainbow(length(unique(scaled_dat$id)))
colors<-c(rgb_2_hex(dirs[1,2],dirs[1,3],dirs[1,4]),rgb_2_hex(dirs[2,2],dirs[2,3],dirs[2,4]),rgb_2_hex(dirs[3,2],dirs[3,3],dirs[3,4]))
#names(colors) = unique(scaled_dat$id)
names(colors)<-c(basename(dirs[1,1]),basename(dirs[2,1]),basename(dirs[3,1]))
#names(colors) = unique(scaled_dat$id)
## Run the t-SNE algorithm and store the results into an object called tsne_results
tsne_results <- Rtsne(scaled_dat[,-1], perplexity=30, check_duplicates = FALSE)
#THE DEFULAT IS 1000 ITERS
#plot(tsne_results$Y, col = colors[scaled_dat$id], bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
plot(tsne_results$Y, col = "black", bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
knitr::opts_chunk$set(echo = TRUE)
#all groupes
library(stringr)
library(openxlsx)
dirs <- as.data.frame(read.xlsx("F:/allGroups/mated_color.xlsx"))
num_of_pop<<-nrow(dirs)
dir=as.data.frame(lapply(structure(.Data=1:1,.Names=1:1),function(x) X = numeric(num_of_pop)))
for (i in 1:num_of_pop){
dir[i,1]<-dirs$groupNameDir[i]
}
groupsNames <<- as.character(basename(dirs$groupNameDir))
#chnage the dir values so it would be readable
dir$X1<-gsub("\\\\", "/", dir$X1)
for(i in 1:num_of_pop){
dir[i,1]<-str_trim(dir[i,1], side = c("right"))
}
library("dplyr")
library("stringr")
index<-0
for(i in 1:num_of_pop){
index<-index+1
setwd(dir[i,1])
all_features<-read.csv("combined_per_fly.csv")
#getting the colom names - getting the feature name e.g aggregation
feature_names<-all_features %>%
select(starts_with('file'))
#taking the first row of it and removing the col names
names_data_frame<-as.data.frame(t(feature_names[1,]))
rownames(names_data_frame)<-(NULL)
colnames(names_data_frame)<-c("feature_name")
#replace the feature names so they won't end with .mat ending
names_data_frame$feature_name<- str_replace(names_data_frame$feature_name ,".mat", "")
#converting them to list
names_in_list<-as.list(names_data_frame$feature_name)
all_features_names<-all_features$dir
all_features_names<-as.data.frame(all_features_names)
colnames(all_features_names)<-c("id")
#taking the movie name and calling it id
#taking only the values
all_features_valus<-all_features %>%
select(starts_with('valu'))
#putting the name of the feature as colom name to the values
colnames(all_features_valus)<-c(names_in_list)
all_features_names<-cbind(all_features_names,all_features_valus)
all_features_names$id<-c(basename(dir[i,1]))
if(index==1){
all_feature_final<-all_features_names
}else{
all_feature_final<-rbind(all_feature_final,all_features_names)
}
#putting factor on the label
all_feature_final$id<-as.factor(all_feature_final$id)
}
#this part was problematic for the random forest
colnames(all_feature_final) <- make.names(colnames(all_feature_final))
#check balance
all_feature_final %>%
count(id) %>%
mutate(prop = n/sum(n))
actuall_data<-all_feature_final[,-1]
scaled_dat <- data.frame(lapply(actuall_data, function(x) scale(x, center = FALSE, scale = max(x, na.rm = TRUE)/1)))
scaled_dat<-cbind(all_feature_final$id,scaled_dat)
names(scaled_dat)[names(scaled_dat) == 'all_feature_final$id'] <- 'id'
library(readr)
library(Rtsne)
rgb_2_hex <- function(r,g,b){
return(rgb(r, g, b, maxColorValue = 1))}
#colors = rainbow(length(unique(scaled_dat$id)))
colors<-c(rgb_2_hex(dirs[1,2],dirs[1,3],dirs[1,4]),rgb_2_hex(dirs[2,2],dirs[2,3],dirs[2,4]))
#names(colors) = unique(scaled_dat$id)
names(colors)<-c(basename(dirs[1,1]),basename(dirs[2,1]))
#names(colors) = unique(scaled_dat$id)
## Run the t-SNE algorithm and store the results into an object called tsne_results
tsne_results <- Rtsne(scaled_dat[,-1], perplexity=30, check_duplicates = FALSE)
#THE DEFULAT IS 1000 ITERS
#plot(tsne_results$Y, col = colors[scaled_dat$id], bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
plot(tsne_results$Y, col = "black", bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
#male vs female
library(stringr)
library(openxlsx)
dirs <- as.data.frame(read.xlsx("F:/allGroups/dirs.xlsx"))
num_of_pop<<-nrow(dirs)
dir=as.data.frame(lapply(structure(.Data=1:1,.Names=1:1),function(x) numeric(num_of_pop)))
for (i in 1:num_of_pop){
dir[i,1]<-dirs$groupNameDir[i]
}
groupsNames <<- as.character(basename(dirs$groupNameDir))
#chnage the dir values so it would be readable
dir$X1<-gsub("\\\\", "/", dir$X1)
for(i in 1:num_of_pop){
dir[i,1]<-str_trim(dir[i,1], side = c("right"))
}
library("dplyr")
library("stringr")
#data frame that keep every group
Female<-data.frame()
Male<-data.frame()
#index for the first time inserting to the data frame we could do without rbind/bindrows
Female_index<-0
Male_index<-0
for(i in 1:num_of_pop){
if(str_detect(basename(dir[i,1]), "Females")){
Female_index<-Female_index+1
setwd(dir[i,1])
all_features<-read.csv("combined_per_fly.csv")
#getting the colom names - getting the feature name e.g aggregation
feature_names<-all_features %>%
select(starts_with('file'))
#taking the first row of it and removing the col names
names_data_frame<-as.data.frame(t(feature_names[1,]))
rownames(names_data_frame)<-(NULL)
colnames(names_data_frame)<-c("feature_name")
#replace the feature names so they won't end with .mat ending
names_data_frame$feature_name<- str_replace(names_data_frame$feature_name ,".mat", "")
#converting them to list
names_in_list<-as.list(names_data_frame$feature_name)
all_features_names<-all_features$dir
all_features_names<-as.data.frame(all_features_names)
#taking the movie name and calling it id
colnames(all_features_names)<-c("id")
#taking only the values
all_features_valus<-all_features %>%
select(starts_with('valu'))
#putting the name of the feature as colom name to the values
colnames(all_features_valus)<-c(names_in_list)
all_features_names<-cbind(all_features_names,all_features_valus)
all_features_names$id<-c("Female")
#if the index is 1 we can't do rbind cuz the df is empty so we need to insert dirctly
#we don't want to use bind_rows,it make problem with the colom names
if(Female_index==1){
Female<-all_features_names
}else{
#else the df is not empty and we can do rbind
Female<-rbind(Female,all_features_names)
}
#putting factor on the label
Female$id<-as.factor(Female$id)
}
###the same for the male group
#if the name contain the word males
if(str_detect(basename(dir[i,1]), "Males")){
Male_index<-Male_index+1
setwd(dir[i,1])
all_features<-read.csv("combined_per_fly.csv")
#getting the colom names - getting the feature name e.g aggregation
feature_names<-all_features %>%
select(starts_with('file'))
#taking the first row of it and removing the col names
names_data_frame<-as.data.frame(t(feature_names[1,]))
rownames(names_data_frame)<-(NULL)
colnames(names_data_frame)<-c("feature_name")
#replace the feature names so they won't end with .mat ending
names_data_frame$feature_name<- str_replace(names_data_frame$feature_name ,".mat", "")
#converting them to list
names_in_list<-as.list(names_data_frame$feature_name)
all_features_names<-all_features$dir
all_features_names<-as.data.frame(all_features_names)
colnames(all_features_names)<-c("id")
#taking the movie name and calling it id
#taking only the values
all_features_valus<-all_features %>%
select(starts_with('valu'))
#putting the name of the feature as colom name to the values
colnames(all_features_valus)<-c(names_in_list)
#connecting the names of the movies to the value and feature name
all_features_names<-cbind(all_features_names,all_features_valus)
all_features_names$id<-c("Male")
if(Male_index==1){
Male<-all_features_names
}else{
Male<-rbind(Male,all_features_names)
}
#putting factor on the label
Male$id<-as.factor(Male$id)
}
}
#after all we combainng them together
all_feature_final<-rbind(Female,Male)
#this part was problematic for the random forest
colnames(all_feature_final) <- make.names(colnames(all_feature_final))
#check balance
all_feature_final %>%
count(id) %>%
mutate(prop = n/sum(n))
#separting the data from the label so we could do scaling and than combein them together
actuall_data<-all_feature_final[,-1]
#scalng each colom to 1
scaled_dat <- data.frame(lapply(actuall_data, function(x) scale(x, center = FALSE, scale = max(x, na.rm = TRUE)/1)))
#putting the id in the first colom
scaled_dat<-cbind(all_feature_final$id,scaled_dat)
#changing it name to id
names(scaled_dat)[names(scaled_dat) == 'all_feature_final$id'] <- 'id'
library(readr)
library(Rtsne)
library(readr)
library(Rtsne)
colors = c("#FF0000","#00FF00")
names(colors)<-unique(scaled_dat$id)
## Run the t-SNE algorithm and store the results into an object called tsne_results
tsne_results <- Rtsne(scaled_dat[,-1], perplexity=30, check_duplicates = FALSE)
#THE DEFULAT IS 1000 ITERS
plot(tsne_results$Y, col = "black", bg= colors[scaled_dat$id], pch = 21, cex = 1.5)
#all groupes
library(stringr)
library(openxlsx)
dirs <- as.data.frame(read.xlsx("F:/allGroups/color.xlsx"))
num_of_pop<<-nrow(dirs)
dir=as.data.frame(lapply(structure(.Data=1:1,.Names=1:1),function(x) X = numeric(num_of_pop)))
for (i in 1:num_of_pop){
dir[i,1]<-dirs$groupNameDir[i]
}
groupsNames <<- as.character(basename(dirs$groupNameDir))
#chnage the dir values so it would be readable
dir$X1<-gsub("\\\\", "/", dir$X1)
for(i in 1:num_of_pop){
dir[i,1]<-str_trim(dir[i,1], side = c("right"))
}
library("dplyr")
library("stringr")
index<-0
for(i in 1:num_of_pop){
index<-index+1
setwd(dir[i,1])
all_features<-read.csv("combined_per_fly.csv")
#getting the colom names - getting the feature name e.g aggregation
feature_names<-all_features %>%
select(starts_with('file'))
#taking the first row of it and removing the col names
names_data_frame<-as.data.frame(t(feature_names[1,]))
rownames(names_data_frame)<-(NULL)
colnames(names_data_frame)<-c("feature_name")
#replace the feature names so they won't end with .mat ending
names_data_frame$feature_name<- str_replace(names_data_frame$feature_name ,".mat", "")
#converting them to list
names_in_list<-as.list(names_data_frame$feature_name)
all_features_names<-all_features$dir
all_features_names<-as.data.frame(all_features_names)
colnames(all_features_names)<-c("id")
#taking the movie name and calling it id
#taking only the values
all_features_valus<-all_features %>%
select(starts_with('valu'))
#putting the name of the feature as colom name to the values
colnames(all_features_valus)<-c(names_in_list)
all_features_names<-cbind(all_features_names,all_features_valus)
all_features_names$id<-c(basename(dir[i,1]))
if(index==1){
all_feature_final<-all_features_names
}else{
all_feature_final<-rbind(all_feature_final,all_features_names)
}
#putting factor on the label
all_feature_final$id<-as.factor(all_feature_final$id)
}
#this part was problematic for the random forest
colnames(all_feature_final) <- make.names(colnames(all_feature_final))
#check balance
all_feature_final %>%
count(id) %>%
mutate(prop = n/sum(n))
actuall_data<-all_feature_final[,-1]
scaled_dat <- data.frame(lapply(actuall_data, function(x) scale(x, center = FALSE, scale = max(x, na.rm = TRUE)/1)))
scaled_dat<-cbind(all_feature_final$id,scaled_dat)
names(scaled_dat)[names(scaled_dat) == 'all_feature_final$id'] <- 'id'
library(readr)
library(Rtsne)
rgb_2_hex <- function(r,g,b){
return(rgb(r, g, b, maxColorValue = 1))}
#colors = rainbow(length(unique(scaled_dat$id)))
colors<-c(rgb_2_hex(dirs[1,2],dirs[1,3],dirs[1,4]),rgb_2_hex(dirs[2,2],dirs[2,3],dirs[2,4]),rgb_2_hex(dirs[3,2],dirs[3,3],dirs[3,4]),rgb_2_hex(dirs[4,2],dirs[4,3],dirs[4,4]),rgb_2_hex(dirs[5,2],dirs[5,3],dirs[5,4]),rgb_2_hex(dirs[6,2],dirs[6,3],dirs[6,4]))
#names(colors) = unique(scaled_dat$id)
names(colors)<-c(basename(dirs[1,1]),basename(dirs[2,1]),basename(dirs[3,1]),basename(dirs[4,1]),basename(dirs[5,1]),basename(dirs[6,1]))
## Run the t-SNE algorithm and store the results into an object called tsne_results
tsne_results <- Rtsne(scaled_dat[,-1], perplexity=30, check_duplicates = FALSE)
#THE DEFULAT IS 1000 ITERS
#plot(tsne_results$Y, col = colors[scaled_dat$id], bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
plot(tsne_results$Y, col = "black", bg= colors[scaled_dat$id], pch = 21, cex = 1.2)
