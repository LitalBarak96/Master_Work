about_page
)
# here i can change by the choice of the user
draw_plot_1 <- function(data_input, num_var_1, num_var_2,color_choice,analysis_type){
if(analysis_type == "plot 2 vars"){
if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color = color_choice)
}
else if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color ="red")
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_1)) +
geom_line(color=color_choice)
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_2)) +
geom_line(color=color_choice)
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_1)) +
geom_line(color ="red")
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_2)) +
geom_histogram(color="red")
}
else if(num_var_1 == not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x =1:26999 ,y=sample(x = 1:100, size  = 26999))) +
geom_bar(color="red")
}
}
if(analysis_type == "correlaction"){
# i need to combine the component and the per frame features for this
}
if(analysis_type=="component"){
means <- sapply(c("center"),
function(x)zoo::rollmean(data_input,1000,align = x, na.pad = TRUE))
means<-as.data.frame(means)
means_no_na<-means %>% drop_na()
means_no_na$frame<-1:nrow(means_no_na)
colnames(means_no_na)<-c("movie","frame")
ggplot(means_no_na, aes(frame,movie)) +
geom_line(size=1,color=color_choice) +ylab("component size")
}
}
server <- function(input, output){
options(shiny.maxRequestSize=40*1024^2)
data_input <- reactive({
req(input$csv_input)
fread(input$csv_input$datapath)
})
observeEvent(data_input(),{
choices <- c(not_sel,names(data_input()))
updateSelectInput(inputId = "num_var_1", choices = choices)
updateSelectInput(inputId = "num_var_2", choices = choices)
updateSelectInput(inputId = "color_choice", choices = c("green","blue","red"))
updateSelectInput(inputId = "analysis_type", choices = c("corrleaction","heatmap","component","plot 2 vars"))
})
num_var_1 <- eventReactive(input$run_button,input$num_var_1)
num_var_2 <- eventReactive(input$run_button,input$num_var_2)
color_choice <- eventReactive(input$run_button,input$color_choice)
analysis_type <- eventReactive(input$run_button,input$analysis_type)
plot_1 <- eventReactive(input$run_button,{
draw_plot_1(data_input(), num_var_1(), num_var_2(), color_choice(),analysis_type())
})
output$plot_1 <- renderPlot(plot_1())
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(data.table)
library(ggplot2)
not_sel <- "Not Selected"
about_page <- tabPanel(
title = "About",
titlePanel("About"),
"Created with R Shiny",
br(),
"2021 April"
)
main_page <- tabPanel(
title = "Analysis",
titlePanel("Analysis"),
sidebarLayout(
sidebarPanel(
title = "Inputs",
fileInput("csv_input", "Select CSV File to Import", accept = ".csv"),
selectInput("num_var_1", "Numerical Variable 1", choices = c(not_sel)),
selectInput("num_var_2", "Numerical Variable 2", choices = c(not_sel)),
selectInput("color_choice", "choose color", choices = c(not_sel)),
selectInput("analysis_type", "choose type of analysis", choices = c(not_sel)),
br(),
actionButton("run_button", "Run Analysis", icon = icon("play"))
),
mainPanel(
tabsetPanel(
tabPanel(
title = "Plot",
plotOutput("plot_1")
),
tabPanel(
title = "Statistics",
fluidRow(
column(width = 4, strong(textOutput("num_var_1_title"))),
column(width = 4, strong(textOutput("num_var_2_title"))),
column(width = 4, strong(textOutput("color_choice_title"))),
column(width = 4, strong(textOutput("analysis_choice_title")))
),
fluidRow(
column(width = 4, tableOutput("num_var_1_summary_table")),
column(width = 4, tableOutput("num_var_2_summary_table")),
column(width = 4, tableOutput("analysis_summary_table"))
),
fluidRow(
column(width = 12, strong("Combined Statistics"))
),
fluidRow(
column(width = 12, tableOutput("combined_summary_table"))
)
)
)
)
)
)
ui <- navbarPage(
title = "Data Analyser",
main_page,
about_page
)
# here i can change by the choice of the user
draw_plot_1 <- function(data_input, num_var_1, num_var_2,color_choice,analysis_type){
if(analysis_type == "plot 2 vars"){
if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color = color_choice)
}
else if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color ="red")
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_1)) +
geom_line(color=color_choice)
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_2)) +
geom_line(color=color_choice)
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_1)) +
geom_line(color ="red")
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_2)) +
geom_histogram(color="red")
}
else if(num_var_1 == not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x =1:26999 ,y=sample(x = 1:100, size  = 26999))) +
geom_bar(color="red")
}
}
if(analysis_type == "correlaction"){
# i need to combine the component and the per frame features for this
}
if(analysis_type=="component"){
means <- sapply(c("center"),
function(x)zoo::rollmean(data_input,1000,align = x, na.pad = TRUE))
means<-as.data.frame(means)
means_no_na<-means %>% drop_na()
means_no_na$frame<-1:nrow(means_no_na)
colnames(means_no_na)<-c("movie","frame")
original_comp<-data_input
original_comp$frame<-1:nrow(original_comp)
colnames(original_comp)<-c("movie","frame")
ggplot(original_comp, aes(frame,movie)) +
theme_bw() +
geom_line(color="red",alpha=0.5) + # values mapped to aes() in ggplot() call
geom_line(means_no_na, aes(frame,movie,size=1,color=color_choice,alpha=1))
#ggplot(means_no_na, aes(frame,movie)) +
#geom_line(size=1,color=color_choice) +ylab("component size")
}
}
server <- function(input, output){
options(shiny.maxRequestSize=40*1024^2)
data_input <- reactive({
req(input$csv_input)
fread(input$csv_input$datapath)
})
observeEvent(data_input(),{
choices <- c(not_sel,names(data_input()))
updateSelectInput(inputId = "num_var_1", choices = choices)
updateSelectInput(inputId = "num_var_2", choices = choices)
updateSelectInput(inputId = "color_choice", choices = c("green","blue","red"))
updateSelectInput(inputId = "analysis_type", choices = c("corrleaction","heatmap","component","plot 2 vars"))
})
num_var_1 <- eventReactive(input$run_button,input$num_var_1)
num_var_2 <- eventReactive(input$run_button,input$num_var_2)
color_choice <- eventReactive(input$run_button,input$color_choice)
analysis_type <- eventReactive(input$run_button,input$analysis_type)
plot_1 <- eventReactive(input$run_button,{
draw_plot_1(data_input(), num_var_1(), num_var_2(), color_choice(),analysis_type())
})
output$plot_1 <- renderPlot(plot_1())
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(data.table)
library(ggplot2)
not_sel <- "Not Selected"
about_page <- tabPanel(
title = "About",
titlePanel("About"),
"Created with R Shiny",
br(),
"2021 April"
)
main_page <- tabPanel(
title = "Analysis",
titlePanel("Analysis"),
sidebarLayout(
sidebarPanel(
title = "Inputs",
fileInput("csv_input", "Select CSV File to Import", accept = ".csv"),
selectInput("num_var_1", "Numerical Variable 1", choices = c(not_sel)),
selectInput("num_var_2", "Numerical Variable 2", choices = c(not_sel)),
selectInput("color_choice", "choose color", choices = c(not_sel)),
selectInput("analysis_type", "choose type of analysis", choices = c(not_sel)),
br(),
actionButton("run_button", "Run Analysis", icon = icon("play"))
),
mainPanel(
tabsetPanel(
tabPanel(
title = "Plot",
plotOutput("plot_1")
),
tabPanel(
title = "Statistics",
fluidRow(
column(width = 4, strong(textOutput("num_var_1_title"))),
column(width = 4, strong(textOutput("num_var_2_title"))),
column(width = 4, strong(textOutput("color_choice_title"))),
column(width = 4, strong(textOutput("analysis_choice_title")))
),
fluidRow(
column(width = 4, tableOutput("num_var_1_summary_table")),
column(width = 4, tableOutput("num_var_2_summary_table")),
column(width = 4, tableOutput("analysis_summary_table"))
),
fluidRow(
column(width = 12, strong("Combined Statistics"))
),
fluidRow(
column(width = 12, tableOutput("combined_summary_table"))
)
)
)
)
)
)
ui <- navbarPage(
title = "Data Analyser",
main_page,
about_page
)
# here i can change by the choice of the user
draw_plot_1 <- function(data_input, num_var_1, num_var_2,color_choice,analysis_type){
if(analysis_type == "plot 2 vars"){
if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color = color_choice)
}
else if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color ="red")
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_1)) +
geom_line(color=color_choice)
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_2)) +
geom_line(color=color_choice)
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_1)) +
geom_line(color ="red")
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_2)) +
geom_histogram(color="red")
}
else if(num_var_1 == not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x =1:26999 ,y=sample(x = 1:100, size  = 26999))) +
geom_bar(color="red")
}
}
if(analysis_type == "correlaction"){
# i need to combine the component and the per frame features for this
}
if(analysis_type=="component"){
means <- sapply(c("center"),
function(x)zoo::rollmean(data_input,1000,align = x, na.pad = TRUE))
means<-as.data.frame(means)
means_no_na<-means %>% drop_na()
means_no_na$frame<-1:nrow(means_no_na)
colnames(means_no_na)<-c("movie","frame")
original_comp<-data_input
original_comp$frame<-1:nrow(original_comp)
colnames(original_comp)<-c("movie","frame")
ggplot(original_comp, aes(frame,movie)) +
theme_bw() +
geom_line() + # values mapped to aes() in ggplot() call
geom_line(means_no_na, aes(frame,movie,size=1,color=color_choice,alpha=1))
#ggplot(means_no_na, aes(frame,movie)) +
#geom_line(size=1,color=color_choice) +ylab("component size")
}
}
server <- function(input, output){
options(shiny.maxRequestSize=40*1024^2)
data_input <- reactive({
req(input$csv_input)
fread(input$csv_input$datapath)
})
observeEvent(data_input(),{
choices <- c(not_sel,names(data_input()))
updateSelectInput(inputId = "num_var_1", choices = choices)
updateSelectInput(inputId = "num_var_2", choices = choices)
updateSelectInput(inputId = "color_choice", choices = c("green","blue","red"))
updateSelectInput(inputId = "analysis_type", choices = c("corrleaction","heatmap","component","plot 2 vars"))
})
num_var_1 <- eventReactive(input$run_button,input$num_var_1)
num_var_2 <- eventReactive(input$run_button,input$num_var_2)
color_choice <- eventReactive(input$run_button,input$color_choice)
analysis_type <- eventReactive(input$run_button,input$analysis_type)
plot_1 <- eventReactive(input$run_button,{
draw_plot_1(data_input(), num_var_1(), num_var_2(), color_choice(),analysis_type())
})
output$plot_1 <- renderPlot(plot_1())
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(data.table)
library(ggplot2)
not_sel <- "Not Selected"
about_page <- tabPanel(
title = "About",
titlePanel("About"),
"Created with R Shiny",
br(),
"2021 April"
)
main_page <- tabPanel(
title = "Analysis",
titlePanel("Analysis"),
sidebarLayout(
sidebarPanel(
title = "Inputs",
fileInput("csv_input", "Select CSV File to Import", accept = ".csv"),
selectInput("num_var_1", "Numerical Variable 1", choices = c(not_sel)),
selectInput("num_var_2", "Numerical Variable 2", choices = c(not_sel)),
selectInput("color_choice", "choose color", choices = c(not_sel)),
selectInput("analysis_type", "choose type of analysis", choices = c(not_sel)),
br(),
actionButton("run_button", "Run Analysis", icon = icon("play"))
),
mainPanel(
tabsetPanel(
tabPanel(
title = "Plot",
plotOutput("plot_1")
),
tabPanel(
title = "Statistics",
fluidRow(
column(width = 4, strong(textOutput("num_var_1_title"))),
column(width = 4, strong(textOutput("num_var_2_title"))),
column(width = 4, strong(textOutput("color_choice_title"))),
column(width = 4, strong(textOutput("analysis_choice_title")))
),
fluidRow(
column(width = 4, tableOutput("num_var_1_summary_table")),
column(width = 4, tableOutput("num_var_2_summary_table")),
column(width = 4, tableOutput("analysis_summary_table"))
),
fluidRow(
column(width = 12, strong("Combined Statistics"))
),
fluidRow(
column(width = 12, tableOutput("combined_summary_table"))
)
)
)
)
)
)
ui <- navbarPage(
title = "Data Analyser",
main_page,
about_page
)
# here i can change by the choice of the user
draw_plot_1 <- function(data_input, num_var_1, num_var_2,color_choice,analysis_type){
if(analysis_type == "plot 2 vars"){
if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color = color_choice)
}
else if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color ="red")
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_1)) +
geom_line(color=color_choice)
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_2)) +
geom_line(color=color_choice)
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_1)) +
geom_line(color ="red")
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_2)) +
geom_histogram(color="red")
}
else if(num_var_1 == not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x =1:26999 ,y=sample(x = 1:100, size  = 26999))) +
geom_bar(color="red")
}
}
if(analysis_type == "correlaction"){
# i need to combine the component and the per frame features for this
}
if(analysis_type=="component"){
means <- sapply(c("center"),
function(x)zoo::rollmean(data_input,1000,align = x, na.pad = TRUE))
means<-as.data.frame(means)
means_no_na<-means %>% drop_na()
means_no_na$frame<-1:nrow(means_no_na)
colnames(means_no_na)<-c("movie","frame")
original_comp<-data_input
original_comp$frame<-1:nrow(original_comp)
colnames(original_comp)<-c("movie","frame")
# ggplot(original_comp, aes(frame,movie)) +
#theme_bw() +
#geom_line() + # values mapped to aes() in ggplot() call
# geom_line(means_no_na, aes(frame,movie,size=1,color=color_choice,alpha=1))
ggplot(means_no_na, aes(frame,movie)) +
geom_line(size=1,color=color_choice) +ylab("component size")
ggplot(original_comp, aes(frame,movie)) +
geom_line(size=1,color=color_choice,alpha=0.5) +ylab("component size")
}
}
server <- function(input, output){
options(shiny.maxRequestSize=40*1024^2)
data_input <- reactive({
req(input$csv_input)
fread(input$csv_input$datapath)
})
observeEvent(data_input(),{
choices <- c(not_sel,names(data_input()))
updateSelectInput(inputId = "num_var_1", choices = choices)
updateSelectInput(inputId = "num_var_2", choices = choices)
updateSelectInput(inputId = "color_choice", choices = c("green","blue","red"))
updateSelectInput(inputId = "analysis_type", choices = c("corrleaction","heatmap","component","plot 2 vars"))
})
num_var_1 <- eventReactive(input$run_button,input$num_var_1)
num_var_2 <- eventReactive(input$run_button,input$num_var_2)
color_choice <- eventReactive(input$run_button,input$color_choice)
analysis_type <- eventReactive(input$run_button,input$analysis_type)
plot_1 <- eventReactive(input$run_button,{
draw_plot_1(data_input(), num_var_1(), num_var_2(), color_choice(),analysis_type())
})
output$plot_1 <- renderPlot(plot_1())
}
shinyApp(ui = ui, server = server)
