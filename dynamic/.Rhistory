summary(res.aov)
TukeyHSD(res.aov)
plot(time_to_component)
library(openxlsx)
library(stringr)
library(dplyr)
library(reshape2)
library(igraph)
library(R.matlab)
library(dplyr)
library(ggplot2)
library(zoo)
library(tidyr)
for_statistic<-NULL
all_condtion_se_and_mean<-NULL
all_condition_statistic<-NULL
main_path<-"D:/EX5_6"
list_of_all_groups<-list.dirs(path = main_path, full.names = TRUE, recursive = FALSE)
f <- function(x) {
if(is.list(x)) lapply(x, f)
else ifelse(length(x) == 0, 0, x)
}
####paramters setting
length_of_movie<-27000
#how many frame in a batch
number_of_frame<-1
#number of movies to analys
#seq by the  number of frames
numbers<-seq(1, length_of_movie, by=number_of_frame)
#use the data of interaction that used angelsub
with_Angelsub<-FALSE
#length(order_of_paths)
for(condition in 1:length(list_of_all_groups)){
path_of_condition<-list_of_all_groups[condition]
#path of the main condition
dir<-list.dirs(recursive = F,path =path_of_condition )
#####
number_of_movies<-length(dir)
if(with_Angelsub == TRUE){
name_of_mat<-"AllinteractionWithAngelsub.mat"
}else{
name_of_mat<-"Allinteraction.mat"
}
########loop of each movie
all_movie_component<-NULL
for(num_of_movie in 1:number_of_movies){
#if the mat file is not existing
filepath<-paste0(dir[num_of_movie], '/',name_of_mat)
#if the component size csv is not exisitng
filepath_csv_component<-paste0(dir[num_of_movie], '/',"componentSize.csv")
if(!(file.exists(filepath))){
stop("Allinteraction.mat does not exist!!!please creat it with MainInteractionAllAngelSub.m ")
}
#if the component csv not exist creat it
if(!(file.exists(filepath_csv_component))){
#####orgenaizing the data for analysis
mat <- (readMat(paste0(dir[num_of_movie], '/',name_of_mat)))
#find how many flys in each movie - it should be 10 but sometimes its less
number_of_flys<-sqrt(length(mat[["new.interactionFrameMatrix"]]))
if(number_of_flys!=10){
stop("the number of flys is not 10,please check if it effect the script somehow and why its not 10")
}
#read each MAT file by the number of flys
sub_list_mat<-matrix(mat[["new.interactionFrameMatrix"]],nrow = number_of_flys, ncol = number_of_flys)
df_mat<-as.data.frame(sub_list_mat)
for(i in 1:ncol(df_mat)){
for(j in 1:nrow(df_mat)){
if(length(unlist(df_mat[i,j])) == 0){
df_mat[i,j] <- lapply(df_mat[i,j], function(x)x[lengths(x) == 0] <- 0)
}
}
}
df_mat<-na.omit(df_mat)
#creat the df with the name of each fly for consistancy
colnames(df_mat)<-c(1:number_of_flys)
rownames(df_mat)<-c(1:number_of_flys)
####
#####get the subscripts of calcualtion
path_to_sub_Scripts<-"C:/Users/lital/OneDrive - Bar Ilan University/Lital/code/interactions_network/dynamic/sub_scripts"
setwd(path_to_sub_Scripts)
files.sources = list.files()
sapply(files.sources, source)
#####
####get who interacting with who and at what frames
all<-data.frame()
all<-all_frames_interaction_above(number_of_flys,sub_list_mat,df_mat)
#for the acasct every interaction mean 1
all<-cbind(all,1)
#####
#####creat network for each frame to claculate the component (cc is compnent)
all_changes_current_movie<-NULL
for(i in 1:(length(numbers)-1)){
#get net and subnet for component size
current_net<-creat_network(all,i,numbers)
sub_current_net<-biggest_cc_subgraph(current_net)
if(sub_current_net[[2]] == FALSE){
# no sub cluster bigger than 3
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current = 0
}else{
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current= length(sub_current_net)
}
#####
#####binding the data for dataframe usage
#without the frame number becuase when we do it for multipul movies we want to cbind and than do melt
tmp<-data.frame(size_cc = size_of_biggest_cc_current)
all_changes_current_movie<-rbind(all_changes_current_movie,tmp)
print(i)
#####
}
#writing to csv to save claulating time
write.csv(all_changes_current_movie,paste0(dir[num_of_movie],"/","componentSize.csv"), row.names = FALSE)
print(num_of_movie)
#if the component do exist
}else{
print("file component is already exist,using him")
#reading existing csv
all_changes_current_movie<- read.csv(filepath_csv_component)
print(num_of_movie)
}
#binding to colums to do melt at the end
all_movie_component<-bind_cols(all_movie_component,all_changes_current_movie)
}
########end loop all movies
###each colum individaully rollmean
rollmeans_colums<-NULL
for(colums in 1:number_of_movies){
#doing rollmean on each colum separately with batch of 1000 in each rollmean
#added pad of na at the ends
means <- sapply(c("center"),
function(x)zoo::rollmean(all_movie_component[,colums],1000,align = x, na.pad = TRUE))
#combind the colums together
rollmeans_colums<-cbind(rollmeans_colums,means)
}
####
###final formating of the data for visual for the meanroll
rollmeans_colums<-as.data.frame(rollmeans_colums)
#remove na that was for padding
means_no_na<-rollmeans_colums %>% drop_na()
#add the frames
#names of coloms
colnames(means_no_na)<-c(c(1:number_of_movies))
#melt the data for visual
library("plotrix")
for_statistic<-cbind(for_statistic,(t(means_no_na[nrow(means_no_na),])))
for_statistic_per_group<-cbind((t(means_no_na[nrow(means_no_na),])),basename(path_of_condition))
colnames(for_statistic_per_group)<-c("value","group")
Mean= rowMeans(means_no_na)
se=rowSds(as.matrix(means_no_na))/sqrt(length(means_no_na))
mean_and_se_per_conditions<-as.data.frame(cbind(Mean,se))
mean_and_se_per_conditions$frame<-1:nrow(mean_and_se_per_conditions)
mean_and_se_per_conditions$group<-basename(path_of_condition)
all_condtion_se_and_mean<-bind_rows(all_condtion_se_and_mean,mean_and_se_per_conditions)
colnames(for_statistic)[condition]<-basename(path_of_condition)
all_condition_statistic<-rbind(all_condition_statistic,for_statistic_per_group)
}
install.packages(plotrix)
install.packages()
install.packages("plotrix")
install.packages("plotrix")
library(openxlsx)
library(stringr)
library(dplyr)
library(reshape2)
library(igraph)
library(R.matlab)
library(dplyr)
library(ggplot2)
library(zoo)
library(tidyr)
for_statistic<-NULL
all_condtion_se_and_mean<-NULL
all_condition_statistic<-NULL
main_path<-"D:/EX5_6"
list_of_all_groups<-list.dirs(path = main_path, full.names = TRUE, recursive = FALSE)
f <- function(x) {
if(is.list(x)) lapply(x, f)
else ifelse(length(x) == 0, 0, x)
}
####paramters setting
length_of_movie<-27000
#how many frame in a batch
number_of_frame<-1
#number of movies to analys
#seq by the  number of frames
numbers<-seq(1, length_of_movie, by=number_of_frame)
#use the data of interaction that used angelsub
with_Angelsub<-FALSE
#length(order_of_paths)
for(condition in 1:length(list_of_all_groups)){
path_of_condition<-list_of_all_groups[condition]
#path of the main condition
dir<-list.dirs(recursive = F,path =path_of_condition )
#####
number_of_movies<-length(dir)
if(with_Angelsub == TRUE){
name_of_mat<-"AllinteractionWithAngelsub.mat"
}else{
name_of_mat<-"Allinteraction.mat"
}
########loop of each movie
all_movie_component<-NULL
for(num_of_movie in 1:number_of_movies){
#if the mat file is not existing
filepath<-paste0(dir[num_of_movie], '/',name_of_mat)
#if the component size csv is not exisitng
filepath_csv_component<-paste0(dir[num_of_movie], '/',"componentSize.csv")
if(!(file.exists(filepath))){
stop("Allinteraction.mat does not exist!!!please creat it with MainInteractionAllAngelSub.m ")
}
#if the component csv not exist creat it
if(!(file.exists(filepath_csv_component))){
#####orgenaizing the data for analysis
mat <- (readMat(paste0(dir[num_of_movie], '/',name_of_mat)))
#find how many flys in each movie - it should be 10 but sometimes its less
number_of_flys<-sqrt(length(mat[["new.interactionFrameMatrix"]]))
if(number_of_flys!=10){
stop("the number of flys is not 10,please check if it effect the script somehow and why its not 10")
}
#read each MAT file by the number of flys
sub_list_mat<-matrix(mat[["new.interactionFrameMatrix"]],nrow = number_of_flys, ncol = number_of_flys)
df_mat<-as.data.frame(sub_list_mat)
for(i in 1:ncol(df_mat)){
for(j in 1:nrow(df_mat)){
if(length(unlist(df_mat[i,j])) == 0){
df_mat[i,j] <- lapply(df_mat[i,j], function(x)x[lengths(x) == 0] <- 0)
}
}
}
df_mat<-na.omit(df_mat)
#creat the df with the name of each fly for consistancy
colnames(df_mat)<-c(1:number_of_flys)
rownames(df_mat)<-c(1:number_of_flys)
####
#####get the subscripts of calcualtion
path_to_sub_Scripts<-"C:/Users/lital/OneDrive - Bar Ilan University/Lital/code/interactions_network/dynamic/sub_scripts"
setwd(path_to_sub_Scripts)
files.sources = list.files()
sapply(files.sources, source)
#####
####get who interacting with who and at what frames
all<-data.frame()
all<-all_frames_interaction_above(number_of_flys,sub_list_mat,df_mat)
#for the acasct every interaction mean 1
all<-cbind(all,1)
#####
#####creat network for each frame to claculate the component (cc is compnent)
all_changes_current_movie<-NULL
for(i in 1:(length(numbers)-1)){
#get net and subnet for component size
current_net<-creat_network(all,i,numbers)
sub_current_net<-biggest_cc_subgraph(current_net)
if(sub_current_net[[2]] == FALSE){
# no sub cluster bigger than 3
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current = 0
}else{
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current= length(sub_current_net)
}
#####
#####binding the data for dataframe usage
#without the frame number becuase when we do it for multipul movies we want to cbind and than do melt
tmp<-data.frame(size_cc = size_of_biggest_cc_current)
all_changes_current_movie<-rbind(all_changes_current_movie,tmp)
print(i)
#####
}
#writing to csv to save claulating time
write.csv(all_changes_current_movie,paste0(dir[num_of_movie],"/","componentSize.csv"), row.names = FALSE)
print(num_of_movie)
#if the component do exist
}else{
print("file component is already exist,using him")
#reading existing csv
all_changes_current_movie<- read.csv(filepath_csv_component)
print(num_of_movie)
}
#binding to colums to do melt at the end
all_movie_component<-bind_cols(all_movie_component,all_changes_current_movie)
}
########end loop all movies
###each colum individaully rollmean
rollmeans_colums<-NULL
for(colums in 1:number_of_movies){
#doing rollmean on each colum separately with batch of 1000 in each rollmean
#added pad of na at the ends
means <- sapply(c("center"),
function(x)zoo::rollmean(all_movie_component[,colums],1000,align = x, na.pad = TRUE))
#combind the colums together
rollmeans_colums<-cbind(rollmeans_colums,means)
}
####
###final formating of the data for visual for the meanroll
rollmeans_colums<-as.data.frame(rollmeans_colums)
#remove na that was for padding
means_no_na<-rollmeans_colums %>% drop_na()
#add the frames
#names of coloms
colnames(means_no_na)<-c(c(1:number_of_movies))
#melt the data for visual
library("plotrix")
for_statistic<-cbind(for_statistic,(t(means_no_na[nrow(means_no_na),])))
for_statistic_per_group<-cbind((t(means_no_na[nrow(means_no_na),])),basename(path_of_condition))
colnames(for_statistic_per_group)<-c("value","group")
Mean= rowMeans(means_no_na)
se=rowSds(as.matrix(means_no_na))/sqrt(length(means_no_na))
mean_and_se_per_conditions<-as.data.frame(cbind(Mean,se))
mean_and_se_per_conditions$frame<-1:nrow(mean_and_se_per_conditions)
mean_and_se_per_conditions$group<-basename(path_of_condition)
all_condtion_se_and_mean<-bind_rows(all_condtion_se_and_mean,mean_and_se_per_conditions)
colnames(for_statistic)[condition]<-basename(path_of_condition)
all_condition_statistic<-rbind(all_condition_statistic,for_statistic_per_group)
}
library(matrixStats)
library(tidyr)
library(openxlsx)
library(stringr)
library(dplyr)
library(reshape2)
library(igraph)
library(R.matlab)
library(dplyr)
library(ggplot2)
library(zoo)
library(tidyr)
library(matrixStats)
for_statistic<-NULL
all_condtion_se_and_mean<-NULL
all_condition_statistic<-NULL
main_path<-"D:/EX5_6"
list_of_all_groups<-list.dirs(path = main_path, full.names = TRUE, recursive = FALSE)
f <- function(x) {
if(is.list(x)) lapply(x, f)
else ifelse(length(x) == 0, 0, x)
}
####paramters setting
length_of_movie<-27000
#how many frame in a batch
number_of_frame<-1
#number of movies to analys
#seq by the  number of frames
numbers<-seq(1, length_of_movie, by=number_of_frame)
#use the data of interaction that used angelsub
with_Angelsub<-FALSE
#length(order_of_paths)
for(condition in 1:length(list_of_all_groups)){
path_of_condition<-list_of_all_groups[condition]
#path of the main condition
dir<-list.dirs(recursive = F,path =path_of_condition )
#####
number_of_movies<-length(dir)
if(with_Angelsub == TRUE){
name_of_mat<-"AllinteractionWithAngelsub.mat"
}else{
name_of_mat<-"Allinteraction.mat"
}
########loop of each movie
all_movie_component<-NULL
for(num_of_movie in 1:number_of_movies){
#if the mat file is not existing
filepath<-paste0(dir[num_of_movie], '/',name_of_mat)
#if the component size csv is not exisitng
filepath_csv_component<-paste0(dir[num_of_movie], '/',"componentSize.csv")
if(!(file.exists(filepath))){
stop("Allinteraction.mat does not exist!!!please creat it with MainInteractionAllAngelSub.m ")
}
#if the component csv not exist creat it
if(!(file.exists(filepath_csv_component))){
#####orgenaizing the data for analysis
mat <- (readMat(paste0(dir[num_of_movie], '/',name_of_mat)))
#find how many flys in each movie - it should be 10 but sometimes its less
number_of_flys<-sqrt(length(mat[["new.interactionFrameMatrix"]]))
if(number_of_flys!=10){
stop("the number of flys is not 10,please check if it effect the script somehow and why its not 10")
}
#read each MAT file by the number of flys
sub_list_mat<-matrix(mat[["new.interactionFrameMatrix"]],nrow = number_of_flys, ncol = number_of_flys)
df_mat<-as.data.frame(sub_list_mat)
for(i in 1:ncol(df_mat)){
for(j in 1:nrow(df_mat)){
if(length(unlist(df_mat[i,j])) == 0){
df_mat[i,j] <- lapply(df_mat[i,j], function(x)x[lengths(x) == 0] <- 0)
}
}
}
df_mat<-na.omit(df_mat)
#creat the df with the name of each fly for consistancy
colnames(df_mat)<-c(1:number_of_flys)
rownames(df_mat)<-c(1:number_of_flys)
####
#####get the subscripts of calcualtion
path_to_sub_Scripts<-"C:/Users/lital/OneDrive - Bar Ilan University/Lital/code/interactions_network/dynamic/sub_scripts"
setwd(path_to_sub_Scripts)
files.sources = list.files()
sapply(files.sources, source)
#####
####get who interacting with who and at what frames
all<-data.frame()
all<-all_frames_interaction_above(number_of_flys,sub_list_mat,df_mat)
#for the acasct every interaction mean 1
all<-cbind(all,1)
#####
#####creat network for each frame to claculate the component (cc is compnent)
all_changes_current_movie<-NULL
for(i in 1:(length(numbers)-1)){
#get net and subnet for component size
current_net<-creat_network(all,i,numbers)
sub_current_net<-biggest_cc_subgraph(current_net)
if(sub_current_net[[2]] == FALSE){
# no sub cluster bigger than 3
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current = 0
}else{
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current= length(sub_current_net)
}
#####
#####binding the data for dataframe usage
#without the frame number becuase when we do it for multipul movies we want to cbind and than do melt
tmp<-data.frame(size_cc = size_of_biggest_cc_current)
all_changes_current_movie<-rbind(all_changes_current_movie,tmp)
print(i)
#####
}
#writing to csv to save claulating time
write.csv(all_changes_current_movie,paste0(dir[num_of_movie],"/","componentSize.csv"), row.names = FALSE)
print(num_of_movie)
#if the component do exist
}else{
print("file component is already exist,using him")
#reading existing csv
all_changes_current_movie<- read.csv(filepath_csv_component)
print(num_of_movie)
}
#binding to colums to do melt at the end
all_movie_component<-bind_cols(all_movie_component,all_changes_current_movie)
}
########end loop all movies
###each colum individaully rollmean
rollmeans_colums<-NULL
for(colums in 1:number_of_movies){
#doing rollmean on each colum separately with batch of 1000 in each rollmean
#added pad of na at the ends
means <- sapply(c("center"),
function(x)zoo::rollmean(all_movie_component[,colums],1000,align = x, na.pad = TRUE))
#combind the colums together
rollmeans_colums<-cbind(rollmeans_colums,means)
}
####
###final formating of the data for visual for the meanroll
rollmeans_colums<-as.data.frame(rollmeans_colums)
#remove na that was for padding
means_no_na<-rollmeans_colums %>% drop_na()
#add the frames
#names of coloms
colnames(means_no_na)<-c(c(1:number_of_movies))
#melt the data for visual
library("plotrix")
for_statistic<-cbind(for_statistic,(t(means_no_na[nrow(means_no_na),])))
for_statistic_per_group<-cbind((t(means_no_na[nrow(means_no_na),])),basename(path_of_condition))
colnames(for_statistic_per_group)<-c("value","group")
Mean= rowMeans(means_no_na)
se=rowSds(as.matrix(means_no_na))/sqrt(length(means_no_na))
mean_and_se_per_conditions<-as.data.frame(cbind(Mean,se))
mean_and_se_per_conditions$frame<-1:nrow(mean_and_se_per_conditions)
mean_and_se_per_conditions$group<-basename(path_of_condition)
all_condtion_se_and_mean<-bind_rows(all_condtion_se_and_mean,mean_and_se_per_conditions)
colnames(for_statistic)[condition]<-basename(path_of_condition)
all_condition_statistic<-rbind(all_condition_statistic,for_statistic_per_group)
}
all_condition_statistic<-as.data.frame(all_condition_statistic)
#all_condition_statistic$value<-as.numeric(all_condition_statistic$value)
res.aov <- aov(value ~ group, data = all_condition_statistic)
summary(res.aov)
TukeyHSD(res.aov)
# for_statistic<-as.data.frame(for_statistic)
# melt_data <- melt(for_statistic)
# for_statistic$num_of_movie<-1:18
# for_statistic$num_of_movie <- factor(for_statistic$num_of_movie)
# aov1 <- aov(Females_Mated ~Females_Grouped+Females_Singles+Males_Mated+Males_Grouped+Males_Singles , data=for_statistic)
# summary(aov1)
# TukeyHSD(aov1)
component_plot_facet <- ggplot(data=all_condtion_se_and_mean, aes(y=Mean, x=frame, group=group, colour=group,
fill=group)) +scale_colour_manual(values = c("Females_Mated"="red", "Females_Grouped"="darkmagenta", "Females_Singles"="deeppink1", "Males_Grouped"="orange","Males_Mated"="dodgerblue3","Males_Singles"="chartreuse4")) +
geom_point(size=0.5) +
geom_line(size=0.5) +
geom_ribbon(aes(ymin=Mean-se, ymax=Mean+se), alpha=0.15, linetype=0) +scale_fill_manual(values = c("Females_Mated"="red", "Females_Grouped"="darkmagenta", "Females_Singles"="deeppink1", "Males_Grouped"="orange","Males_Mated"="dodgerblue3","Males_Singles"="chartreuse4")) +facet_wrap(~ group)+
theme_classic()+ggtitle("component size(after moving avarge) per frame per conditions all movies with se") +
xlab("frames") + ylab("component size") +theme(
plot.title = element_text(color="black", size=12, face="bold.italic"),
axis.title.x = element_text(color="black", size=10, face="bold"),
axis.title.y = element_text(color="black", size=10, face="bold"))
plot(component_plot_facet)
# looks ok, no lines at the edges
component_plot <- ggplot(data=all_condtion_se_and_mean, aes(y=Mean, x=frame, group=group, colour=group,
fill=group)) +scale_colour_manual(values = c("Females_Mated"="red", "Females_Grouped"="darkmagenta", "Females_Singles"="deeppink1", "Males_Grouped"="orange","Males_Mated"="dodgerblue3","Males_Singles"="chartreuse4")) +
geom_point(size=0.5) +
geom_line(size=0.5) +
geom_ribbon(aes(ymin=Mean-se, ymax=Mean+se), alpha=0.15, linetype=0) +scale_fill_manual(values = c("Females_Mated"="red", "Females_Grouped"="darkmagenta", "Females_Singles"="deeppink1", "Males_Grouped"="orange","Males_Mated"="dodgerblue3","Males_Singles"="chartreuse4")) +
theme_classic()+ggtitle("component size(after moving avarge) per frame all conditions all movies with se") +
xlab("frames") + ylab("component size") +theme(
plot.title = element_text(color="black", size=13, face="bold.italic"),
axis.title.x = element_text(color="black", size=13, face="bold"),
axis.title.y = element_text(color="black", size=13, face="bold"))
# looks ok, no lines at the edges
plot(component_plot)
res.aov <- aov(value ~ group, data = all_condition_statistic)
summary(res.aov)
TukeyHSD(res.aov)
View(all_condition_statistic)
