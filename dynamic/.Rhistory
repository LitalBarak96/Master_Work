else if(num_var_1 == not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x =1:26999 ,y=sample(x = 1:100, size  = 26999))) +
geom_bar(color="red")
}
}
if(analysis_type == "correlaction"){
# i need to combine the component and the per frame features for this
}
if(analysis_type=="component"){
means <- sapply(c("center"),
function(x)zoo::rollmean(data_input,1000,align = x, na.pad = TRUE))
means<-as.data.frame(means)
means_no_na<-means %>% drop_na()
means_no_na$frame<-1:nrow(means_no_na)
colnames(means_no_na)<-c("movie","frame")
original_comp<-data_input
original_comp$frame<-1:nrow(original_comp)
colnames(original_comp)<-c("movie","frame")
ggplot(original_comp, aes(frame,movie)) +
theme_bw() +
geom_line(color="red",alpha=0.5) + # values mapped to aes() in ggplot() call
geom_line(means_no_na, aes(frame,movie,size=1,color=color_choice,alpha=1))
#ggplot(means_no_na, aes(frame,movie)) +
#geom_line(size=1,color=color_choice) +ylab("component size")
}
}
server <- function(input, output){
options(shiny.maxRequestSize=40*1024^2)
data_input <- reactive({
req(input$csv_input)
fread(input$csv_input$datapath)
})
observeEvent(data_input(),{
choices <- c(not_sel,names(data_input()))
updateSelectInput(inputId = "num_var_1", choices = choices)
updateSelectInput(inputId = "num_var_2", choices = choices)
updateSelectInput(inputId = "color_choice", choices = c("green","blue","red"))
updateSelectInput(inputId = "analysis_type", choices = c("corrleaction","heatmap","component","plot 2 vars"))
})
num_var_1 <- eventReactive(input$run_button,input$num_var_1)
num_var_2 <- eventReactive(input$run_button,input$num_var_2)
color_choice <- eventReactive(input$run_button,input$color_choice)
analysis_type <- eventReactive(input$run_button,input$analysis_type)
plot_1 <- eventReactive(input$run_button,{
draw_plot_1(data_input(), num_var_1(), num_var_2(), color_choice(),analysis_type())
})
output$plot_1 <- renderPlot(plot_1())
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(data.table)
library(ggplot2)
not_sel <- "Not Selected"
about_page <- tabPanel(
title = "About",
titlePanel("About"),
"Created with R Shiny",
br(),
"2021 April"
)
main_page <- tabPanel(
title = "Analysis",
titlePanel("Analysis"),
sidebarLayout(
sidebarPanel(
title = "Inputs",
fileInput("csv_input", "Select CSV File to Import", accept = ".csv"),
selectInput("num_var_1", "Numerical Variable 1", choices = c(not_sel)),
selectInput("num_var_2", "Numerical Variable 2", choices = c(not_sel)),
selectInput("color_choice", "choose color", choices = c(not_sel)),
selectInput("analysis_type", "choose type of analysis", choices = c(not_sel)),
br(),
actionButton("run_button", "Run Analysis", icon = icon("play"))
),
mainPanel(
tabsetPanel(
tabPanel(
title = "Plot",
plotOutput("plot_1")
),
tabPanel(
title = "Statistics",
fluidRow(
column(width = 4, strong(textOutput("num_var_1_title"))),
column(width = 4, strong(textOutput("num_var_2_title"))),
column(width = 4, strong(textOutput("color_choice_title"))),
column(width = 4, strong(textOutput("analysis_choice_title")))
),
fluidRow(
column(width = 4, tableOutput("num_var_1_summary_table")),
column(width = 4, tableOutput("num_var_2_summary_table")),
column(width = 4, tableOutput("analysis_summary_table"))
),
fluidRow(
column(width = 12, strong("Combined Statistics"))
),
fluidRow(
column(width = 12, tableOutput("combined_summary_table"))
)
)
)
)
)
)
ui <- navbarPage(
title = "Data Analyser",
main_page,
about_page
)
# here i can change by the choice of the user
draw_plot_1 <- function(data_input, num_var_1, num_var_2,color_choice,analysis_type){
if(analysis_type == "plot 2 vars"){
if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color = color_choice)
}
else if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color ="red")
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_1)) +
geom_line(color=color_choice)
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_2)) +
geom_line(color=color_choice)
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_1)) +
geom_line(color ="red")
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_2)) +
geom_histogram(color="red")
}
else if(num_var_1 == not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x =1:26999 ,y=sample(x = 1:100, size  = 26999))) +
geom_bar(color="red")
}
}
if(analysis_type == "correlaction"){
# i need to combine the component and the per frame features for this
}
if(analysis_type=="component"){
means <- sapply(c("center"),
function(x)zoo::rollmean(data_input,1000,align = x, na.pad = TRUE))
means<-as.data.frame(means)
means_no_na<-means %>% drop_na()
means_no_na$frame<-1:nrow(means_no_na)
colnames(means_no_na)<-c("movie","frame")
original_comp<-data_input
original_comp$frame<-1:nrow(original_comp)
colnames(original_comp)<-c("movie","frame")
ggplot(original_comp, aes(frame,movie)) +
theme_bw() +
geom_line() + # values mapped to aes() in ggplot() call
geom_line(means_no_na, aes(frame,movie,size=1,color=color_choice,alpha=1))
#ggplot(means_no_na, aes(frame,movie)) +
#geom_line(size=1,color=color_choice) +ylab("component size")
}
}
server <- function(input, output){
options(shiny.maxRequestSize=40*1024^2)
data_input <- reactive({
req(input$csv_input)
fread(input$csv_input$datapath)
})
observeEvent(data_input(),{
choices <- c(not_sel,names(data_input()))
updateSelectInput(inputId = "num_var_1", choices = choices)
updateSelectInput(inputId = "num_var_2", choices = choices)
updateSelectInput(inputId = "color_choice", choices = c("green","blue","red"))
updateSelectInput(inputId = "analysis_type", choices = c("corrleaction","heatmap","component","plot 2 vars"))
})
num_var_1 <- eventReactive(input$run_button,input$num_var_1)
num_var_2 <- eventReactive(input$run_button,input$num_var_2)
color_choice <- eventReactive(input$run_button,input$color_choice)
analysis_type <- eventReactive(input$run_button,input$analysis_type)
plot_1 <- eventReactive(input$run_button,{
draw_plot_1(data_input(), num_var_1(), num_var_2(), color_choice(),analysis_type())
})
output$plot_1 <- renderPlot(plot_1())
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(data.table)
library(ggplot2)
not_sel <- "Not Selected"
about_page <- tabPanel(
title = "About",
titlePanel("About"),
"Created with R Shiny",
br(),
"2021 April"
)
main_page <- tabPanel(
title = "Analysis",
titlePanel("Analysis"),
sidebarLayout(
sidebarPanel(
title = "Inputs",
fileInput("csv_input", "Select CSV File to Import", accept = ".csv"),
selectInput("num_var_1", "Numerical Variable 1", choices = c(not_sel)),
selectInput("num_var_2", "Numerical Variable 2", choices = c(not_sel)),
selectInput("color_choice", "choose color", choices = c(not_sel)),
selectInput("analysis_type", "choose type of analysis", choices = c(not_sel)),
br(),
actionButton("run_button", "Run Analysis", icon = icon("play"))
),
mainPanel(
tabsetPanel(
tabPanel(
title = "Plot",
plotOutput("plot_1")
),
tabPanel(
title = "Statistics",
fluidRow(
column(width = 4, strong(textOutput("num_var_1_title"))),
column(width = 4, strong(textOutput("num_var_2_title"))),
column(width = 4, strong(textOutput("color_choice_title"))),
column(width = 4, strong(textOutput("analysis_choice_title")))
),
fluidRow(
column(width = 4, tableOutput("num_var_1_summary_table")),
column(width = 4, tableOutput("num_var_2_summary_table")),
column(width = 4, tableOutput("analysis_summary_table"))
),
fluidRow(
column(width = 12, strong("Combined Statistics"))
),
fluidRow(
column(width = 12, tableOutput("combined_summary_table"))
)
)
)
)
)
)
ui <- navbarPage(
title = "Data Analyser",
main_page,
about_page
)
# here i can change by the choice of the user
draw_plot_1 <- function(data_input, num_var_1, num_var_2,color_choice,analysis_type){
if(analysis_type == "plot 2 vars"){
if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color = color_choice)
}
else if(num_var_1 != not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = num_var_1, y = num_var_2)) +
geom_point(color ="red")
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_1)) +
geom_line(color=color_choice)
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999, y = num_var_2)) +
geom_line(color=color_choice)
}
else if(num_var_1 != not_sel & num_var_2 == not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_1)) +
geom_line(color ="red")
}
else if(num_var_1 == not_sel & num_var_2 != not_sel & color_choice == not_sel){
ggplot(data = data_input,
aes_string(x = 1:26999,y=num_var_2)) +
geom_histogram(color="red")
}
else if(num_var_1 == not_sel & num_var_2 == not_sel & color_choice != not_sel){
ggplot(data = data_input,
aes_string(x =1:26999 ,y=sample(x = 1:100, size  = 26999))) +
geom_bar(color="red")
}
}
if(analysis_type == "correlaction"){
# i need to combine the component and the per frame features for this
}
if(analysis_type=="component"){
means <- sapply(c("center"),
function(x)zoo::rollmean(data_input,1000,align = x, na.pad = TRUE))
means<-as.data.frame(means)
means_no_na<-means %>% drop_na()
means_no_na$frame<-1:nrow(means_no_na)
colnames(means_no_na)<-c("movie","frame")
original_comp<-data_input
original_comp$frame<-1:nrow(original_comp)
colnames(original_comp)<-c("movie","frame")
# ggplot(original_comp, aes(frame,movie)) +
#theme_bw() +
#geom_line() + # values mapped to aes() in ggplot() call
# geom_line(means_no_na, aes(frame,movie,size=1,color=color_choice,alpha=1))
ggplot(means_no_na, aes(frame,movie)) +
geom_line(size=1,color=color_choice) +ylab("component size")
ggplot(original_comp, aes(frame,movie)) +
geom_line(size=1,color=color_choice,alpha=0.5) +ylab("component size")
}
}
server <- function(input, output){
options(shiny.maxRequestSize=40*1024^2)
data_input <- reactive({
req(input$csv_input)
fread(input$csv_input$datapath)
})
observeEvent(data_input(),{
choices <- c(not_sel,names(data_input()))
updateSelectInput(inputId = "num_var_1", choices = choices)
updateSelectInput(inputId = "num_var_2", choices = choices)
updateSelectInput(inputId = "color_choice", choices = c("green","blue","red"))
updateSelectInput(inputId = "analysis_type", choices = c("corrleaction","heatmap","component","plot 2 vars"))
})
num_var_1 <- eventReactive(input$run_button,input$num_var_1)
num_var_2 <- eventReactive(input$run_button,input$num_var_2)
color_choice <- eventReactive(input$run_button,input$color_choice)
analysis_type <- eventReactive(input$run_button,input$analysis_type)
plot_1 <- eventReactive(input$run_button,{
draw_plot_1(data_input(), num_var_1(), num_var_2(), color_choice(),analysis_type())
})
output$plot_1 <- renderPlot(plot_1())
}
shinyApp(ui = ui, server = server)
library(openxlsx)
library(stringr)
library(dplyr)
library(reshape2)
library(igraph)
library(R.matlab)
library(dplyr)
library(ggplot2)
library(zoo)
library(tidyr)
order_of_paths<-c("D:/EX5_6/Females_Mated","D:/EX5_6/Females_Grouped","D:/EX5_6/Females_Singles","D:/EX5_6/Males_Grouped","D:/EX5_6/Males_Mated","D:/EX5_6/Males_Singels")
f <- function(x) {
if(is.list(x)) lapply(x, f)
else ifelse(length(x) == 0, 0, x)
}
path_to_sub_Scripts<-choose.dir(default = "", caption = "Select path of scource scripts")
####paramters setting
length_of_movie<-27000
#how many frame in a batch
number_of_frame<-1
#number of movies to analys
#seq by the  number of frames
numbers<-seq(1, length_of_movie, by=number_of_frame)
#use the data of interaction that used angelsub
with_Angelsub<-FALSE
#length(order_of_paths)
for(condition in 1:length(order_of_paths)){
path_of_condition<-order_of_paths[condition]
#path of the main condition
dir<-list.dirs(recursive = F,path =path_of_condition )
#####
number_of_movies<-length(dir)
if(with_Angelsub == TRUE){
name_of_mat<-"AllinteractionWithAngelsub.mat"
}else{
name_of_mat<-"Allinteraction.mat"
}
########loop of each movie
all_movie_component<-NULL
for(num_of_movie in 1:number_of_movies){
#if the mat file is not existing
filepath<-paste0(dir[num_of_movie], '/',name_of_mat)
#if the component size csv is not exisitng
filepath_csv_component<-paste0(dir[num_of_movie], '/',"componentSize.csv")
if(!(file.exists(filepath))){
stop("Allinteraction.mat does not exist!!!please creat it with MainInteractionAllAngelSub.m ")
}
#if the component csv not exist creat it
if(!(file.exists(filepath_csv_component))){
#####orgenaizing the data for analysis
mat <- (readMat(paste0(dir[num_of_movie], '/',name_of_mat)))
#find how many flys in each movie - it should be 10 but sometimes its less
number_of_flys<-sqrt(length(mat[["new.interactionFrameMatrix"]]))
if(number_of_flys!=10){
stop("the number of flys is not 10,please check if it effect the script somehow and why its not 10")
}
#read each MAT file by the number of flys
sub_list_mat<-matrix(mat[["new.interactionFrameMatrix"]],nrow = number_of_flys, ncol = number_of_flys)
df_mat<-as.data.frame(sub_list_mat)
for(i in 1:ncol(df_mat)){
for(j in 1:nrow(df_mat)){
if(length(unlist(df_mat[i,j])) == 0){
df_mat[i,j] <- lapply(df_mat[i,j], function(x)x[lengths(x) == 0] <- 0)
}
}
}
df_mat<-na.omit(df_mat)
#creat the df with the name of each fly for consistancy
colnames(df_mat)<-c(1:number_of_flys)
rownames(df_mat)<-c(1:number_of_flys)
####
#####get the subscripts of calcualtion
setwd(path_to_sub_Scripts)
files.sources = list.files()
sapply(files.sources, source)
#####
####get who interacting with who and at what frames
all<-data.frame()
all<-all_frames_interaction_above(number_of_flys,sub_list_mat,df_mat)
#for the acasct every interaction mean 1
all<-cbind(all,1)
#####
#####creat network for each frame to claculate the component (cc is compnent)
all_changes_current_movie<-NULL
for(i in 1:(length(numbers)-1)){
#get net and subnet for component size
current_net<-creat_network(all,i,numbers)
sub_current_net<-biggest_cc_subgraph(current_net)
if(sub_current_net[[2]] == FALSE){
# no sub cluster bigger than 3
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current = 0
}else{
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current= length(sub_current_net)
}
#####
#####binding the data for dataframe usage
#without the frame number becuase when we do it for multipul movies we want to cbind and than do melt
tmp<-data.frame(size_cc = size_of_biggest_cc_current)
all_changes_current_movie<-rbind(all_changes_current_movie,tmp)
print(i)
#####
}
#writing to csv to save claulating time
write.csv(all_changes_current_movie,paste0(dir[num_of_movie],"/","componentSize.csv"), row.names = FALSE)
print(num_of_movie)
#if the component do exist
}else{
print("file component is already exist,using him")
#reading existing csv
all_changes_current_movie<- read.csv(filepath_csv_component)
print(num_of_movie)
}
#binding to colums to do melt at the end
all_movie_component<-bind_cols(all_movie_component,all_changes_current_movie)
}
########end loop all movies
###each colum individaully rollmean
rollmeans_colums<-NULL
for(colums in 1:number_of_movies){
#doing rollmean on each colum separately with batch of 1000 in each rollmean
#added pad of na at the ends
means <- sapply(c("center"),
function(x)zoo::rollmean(all_movie_component[,colums],1000,align = x, na.pad = TRUE))
#combind the colums together
rollmeans_colums<-cbind(rollmeans_colums,means)
}
####
###final formating of the data for visual for the meanroll
rollmeans_colums<-as.data.frame(rollmeans_colums)
#remove na that was for padding
means_no_na<-rollmeans_colums %>% drop_na()
#add the frames
means_no_na$frame<-1:nrow(means_no_na)
#names of coloms
colnames(means_no_na)<-c(c(1:number_of_movies),"frame")
#melt the data for visual
melted_means_no_na<- melt(data = means_no_na, id.vars = "frame")
###
### formating for the original compnent size for comprence
all_movie_component$frame<-1:nrow(all_movie_component)
colnames(all_movie_component)<-c(c(1:number_of_movies),"frame")
melted_original_comp<- melt(data = all_movie_component, id.vars = "frame")
###
###ploting
#moving avg
movingavg_all_movie<-ggplot(melted_means_no_na, aes(frame,value,colour = variable)) +
geom_line(size=1) +
facet_wrap(~variable) +ylab("component size")+ ggtitle(paste0(basename(path_of_condition)," component size moving avarge "))
#original
original_comp_all_movie<-ggplot(melted_original_comp, aes(frame,value,colour = variable)) +
geom_line(size=1) +
facet_wrap(~variable)+ylab("component size")+ ggtitle(paste0(basename(path_of_condition)," component size original"))
geom_line(size=1)
#moving avg all movies on top each over with midean
movingavg_together<-ggplot(melted_means_no_na, aes(frame,value,colour = variable)) +
geom_line(size=1) +   stat_summary(fun = "median", geom = "line", color = "black", size = 1.1)+ylab("component size")+ ggtitle(paste0(basename(path_of_condition)," component size moving avarge"))
###
pdf(file = paste0(path_of_condition,"/moving_all_movies_component.pdf"))
plot(movingavg_all_movie)
dev.off()
pdf(file = paste0(path_of_condition,"/original_all_movie_component.pdf"))
plot(original_comp_all_movie)
dev.off()
}
dir[18]
dir
condition
num_of_movie
filepath
path_of_condition
