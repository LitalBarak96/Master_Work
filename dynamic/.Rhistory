mean_and_sd_all_conditions$group<-basename(path_to_group)
all_sd_and_avg_all_conditions_final<-bind_rows(all_sd_and_avg_all_conditions_final,mean_and_sd_all_conditions)
#ggplot(mean_and_sd_all_conditions, aes(frame,Mean,color="blue")) +  geom_point(size=0.5)+
#geom_ribbon(aes(ymin=Mean-stdev, ymax=Mean+stdev),alpha = .2)
}
pl_facted <- ggplot(data=all_sd_and_avg_all_conditions_final, aes(y=Mean, x=frame, group=group, colour=group,
fill=group)) +scale_colour_manual(values = c("Females_Mated"="red", "Females_Grouped"="darkmagenta", "Females_Singles"="deeppink1", "Males_Grouped"="orange","Males_Mated"="dodgerblue3","Males_Singles"="chartreuse4")) +
geom_point(size=0.5) +
geom_line(size=0.5) +
geom_ribbon(aes(ymin=Mean-se, ymax=Mean+se), alpha=0.15, linetype=0) +scale_fill_manual(values = c("Females_Mated"="red", "Females_Grouped"="darkmagenta", "Females_Singles"="deeppink1", "Males_Grouped"="orange","Males_Mated"="dodgerblue3","Males_Singles"="chartreuse4")) +facet_wrap(~ group)+
theme_classic()+ggtitle("density per frame all conditions all movies with se") +
xlab("frames") + ylab("density") +theme(
plot.title = element_text(color="black", size=13, face="bold.italic"),
axis.title.x = element_text(color="black", size=13, face="bold"),
axis.title.y = element_text(color="black", size=13, face="bold"))
# looks ok, no lines at the edges
plot(pl_facted)
pl <- ggplot(data=all_sd_and_avg_all_conditions_final, aes(y=Mean, x=frame, group=group, colour=group,
fill=group)) +scale_colour_manual(values = c("Females_Mated"="red", "Females_Grouped"="darkmagenta", "Females_Singles"="deeppink1", "Males_Grouped"="orange","Males_Mated"="dodgerblue3","Males_Singles"="chartreuse4")) +
geom_point(size=0.5) +
geom_line(size=0.5) +
geom_ribbon(aes(ymin=Mean-se, ymax=Mean+se), alpha=0.15, linetype=0) +scale_fill_manual(values = c("Females_Mated"="red", "Females_Grouped"="darkmagenta", "Females_Singles"="deeppink1", "Males_Grouped"="orange","Males_Mated"="dodgerblue3","Males_Singles"="chartreuse4")) +
theme_classic()+ggtitle("density per frame all conditions all movies with se") +
xlab("frames") + ylab("density") +theme(
plot.title = element_text(color="black", size=13, face="bold.italic"),
axis.title.x = element_text(color="black", size=13, face="bold"),
axis.title.y = element_text(color="black", size=13, face="bold"))
# looks ok, no lines at the edges
plot(pl)
View(all_sd_and_avg_all_conditions_final)
View(mean_and_sd_all_conditions)
View(value_of_density)
View(value_of_density)
View(all_sd_and_avg_all_conditions_final)
View(mean_and_sd_all_conditions)
View(all_sd_and_avg_all_conditions_final)
library(openxlsx)
library(stringr)
library(dplyr)
library(reshape2)
library(igraph)
library(R.matlab)
library(dplyr)
library(ggplot2)
library(zoo)
library(tidyr)
all_condition_se_avg_times_to_component<-NULL
all_condtion_se_and_mean<-NULL
main_path<-"D:/EX5_6"
list_of_all_groups<-list.dirs(path = main_path, full.names = TRUE, recursive = FALSE)
f <- function(x) {
if(is.list(x)) lapply(x, f)
else ifelse(length(x) == 0, 0, x)
}
####paramters setting
length_of_movie<-27000
#how many frame in a batch
number_of_frame<-1
#number of movies to analys
#seq by the  number of frames
numbers<-seq(1, length_of_movie, by=number_of_frame)
#use the data of interaction that used angelsub
with_Angelsub<-FALSE
#length(order_of_paths)
all_conditions_avarge<-NULL
for(condition in 1:length(list_of_all_groups)){
path_of_condition<-list_of_all_groups[condition]
#path of the main condition
dir<-list.dirs(recursive = F,path =path_of_condition )
#####
number_of_movies<-length(dir)
if(with_Angelsub == TRUE){
name_of_mat<-"AllinteractionWithAngelsub.mat"
}else{
name_of_mat<-"Allinteraction.mat"
}
########loop of each movie
all_movie_component<-NULL
for(num_of_movie in 1:number_of_movies){
#if the mat file is not existing
filepath<-paste0(dir[num_of_movie], '/',name_of_mat)
#if the component size csv is not exisitng
filepath_csv_component<-paste0(dir[num_of_movie], '/',"componentSize.csv")
if(!(file.exists(filepath))){
stop("Allinteraction.mat does not exist!!!please creat it with MainInteractionAllAngelSub.m ")
}
#if the component csv not exist creat it
if(!(file.exists(filepath_csv_component))){
#####orgenaizing the data for analysis
mat <- (readMat(paste0(dir[num_of_movie], '/',name_of_mat)))
#find how many flys in each movie - it should be 10 but sometimes its less
number_of_flys<-sqrt(length(mat[["new.interactionFrameMatrix"]]))
if(number_of_flys!=10){
stop("the number of flys is not 10,please check if it effect the script somehow and why its not 10")
}
#read each MAT file by the number of flys
sub_list_mat<-matrix(mat[["new.interactionFrameMatrix"]],nrow = number_of_flys, ncol = number_of_flys)
df_mat<-as.data.frame(sub_list_mat)
for(i in 1:ncol(df_mat)){
for(j in 1:nrow(df_mat)){
if(length(unlist(df_mat[i,j])) == 0){
df_mat[i,j] <- lapply(df_mat[i,j], function(x)x[lengths(x) == 0] <- 0)
}
}
}
df_mat<-na.omit(df_mat)
#creat the df with the name of each fly for consistancy
colnames(df_mat)<-c(1:number_of_flys)
rownames(df_mat)<-c(1:number_of_flys)
####
#####get the subscripts of calcualtion
path_to_sub_Scripts<-"C:/Users/lital/OneDrive - Bar Ilan University/Lital/code/interactions_network/dynamic/sub_scripts"
setwd(path_to_sub_Scripts)
files.sources = list.files()
sapply(files.sources, source)
#####
####get who interacting with who and at what frames
all<-data.frame()
all<-all_frames_interaction_above(number_of_flys,sub_list_mat,df_mat)
#for the acasct every interaction mean 1
all<-cbind(all,1)
#####
#####creat network for each frame to claculate the component (cc is compnent)
component_sizes<-NULL
for(i in 1:(length(numbers)-1)){
#get net and subnet for component size
current_net<-creat_network(all,i,numbers)
sub_current_net<-biggest_cc_subgraph(current_net)
if(sub_current_net[[2]] == FALSE){
# no sub cluster bigger than 3
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current = 0
}else{
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current= length(sub_current_net)
}
#####
#####binding the data for dataframe usage
#without the frame number becuase when we do it for multipul movies we want to cbind and than do melt
tmp<-data.frame(size_cc = size_of_biggest_cc_current)
component_sizes<-rbind(component_sizes,tmp)
print(i)
#####
}
#writing to csv to save claulating time
write.csv(component_sizes,paste0(dir[num_of_movie],"/","componentSize.csv"), row.names = FALSE)
print(num_of_movie)
#if the component do exist
}else{
print("file component is already exist,using him")
#reading existing csv
component_sizes<- read.csv(filepath_csv_component)
print(num_of_movie)
}
#binding to colums to do melt at the end
all_movie_component<-bind_cols(all_movie_component,component_sizes)
}
########end loop all movies
colnames(all_movie_component)<-1:length(all_movie_component)
coponent_Size<-3
find_index_bigger_than <- function(x) {
min(which(x>coponent_Size))
}
#without frames
frames_bigger_than_component<-as.data.frame(apply(all_movie_component, 2, find_index_bigger_than))
colnames(frames_bigger_than_component)<-"frames"
frames_bigger_than_component[frames_bigger_than_component == Inf]<-(27000)
Mean<-mean(frames_bigger_than_component$frames)
se<-sd(frames_bigger_than_component$frames)/sqrt(length(frames_bigger_than_component$frames))
tmp_mean_and_Se_current_condition<-as.data.frame(cbind(Mean,se))
tmp_mean_and_Se_current_condition$group<-basename(path_of_condition)
all_condition_se_avg_times_to_component<-bind_rows(all_condition_se_avg_times_to_component,tmp_mean_and_Se_current_condition)
#component_bigger_than_1_divied<-round((1/frames_bigger_than_component),4)
#component_bigger_than__in_Sec<-round(frames_bigger_than_component/30)
#component_bigger_than__in_Sec[component_bigger_than__in_Sec == Inf]<-(0)
#colnames(component_bigger_than__in_Sec)<-"seconds"
#colnames(component_bigger_than_1_divied)<-"1/frames"
}
time_to_component<-ggplot(all_condition_se_avg_times_to_component) +
geom_bar( aes(x=group, y=Mean,colour=group, fill=group), stat="identity", alpha=0.7)+scale_colour_manual(values = c("Females_Mated"="red", "Females_Grouped"="darkmagenta", "Females_Singles"="deeppink1", "Males_Grouped"="orange","Males_Mated"="dodgerblue3","Males_Singles"="chartreuse4"))  + scale_fill_manual(values = c("Females_Mated"="red", "Females_Grouped"="darkmagenta", "Females_Singles"="deeppink1", "Males_Grouped"="orange","Males_Mated"="dodgerblue3","Males_Singles"="chartreuse4"))+
geom_errorbar( aes(x=group, ymin=Mean-se, ymax=Mean+se), width=0.4, colour="black", alpha=0.9, size=1.3)+labs(title=paste0("in avarge per condition frames to get to component size of ",coponent_Size), x ="condition", y = "frames")
View(all_condition_se_avg_times_to_component)
View(frames_bigger_than_component)
View(frames_bigger_than_component)
View(frames_bigger_than_component)
is_normal<-shapiro.test(frames_bigger_than_component$frames)
View(is_normal)
shapiro_tested<-shapiro.test(frames_bigger_than_component$frames)
View(shapiro_tested)
shapiro_tested$p.value
all__for_statistic<-as.data.frame(frames_bigger_than_component$frames)
View(all__for_statistic)
all__for_statistic<-as.data.frame(t(frames_bigger_than_component$frames))
View(all__for_statistic)
all_for_statistic<-as.data.frame(t(frames_bigger_than_component$frames))
View(all_for_statistic)
all_for_statistic<-as.data.frame(t(frames_bigger_than_component$frames))
all_for_statistic$name<-basename(path_of_condition)
View(all_for_statistic)
View(all_condition_se_avg_times_to_component)
library(openxlsx)
library(stringr)
library(dplyr)
library(reshape2)
library(igraph)
library(R.matlab)
library(dplyr)
library(ggplot2)
library(zoo)
library(tidyr)
all_for_stat<-NULL
all_condtion_se_and_mean<-NULL
main_path<-"D:/EX5_6"
list_of_all_groups<-list.dirs(path = main_path, full.names = TRUE, recursive = FALSE)
f <- function(x) {
if(is.list(x)) lapply(x, f)
else ifelse(length(x) == 0, 0, x)
}
####paramters setting
length_of_movie<-27000
#how many frame in a batch
number_of_frame<-1
#number of movies to analys
#seq by the  number of frames
numbers<-seq(1, length_of_movie, by=number_of_frame)
#use the data of interaction that used angelsub
with_Angelsub<-FALSE
#length(order_of_paths)
all_conditions_avarge<-NULL
for(condition in 1:length(list_of_all_groups)){
path_of_condition<-list_of_all_groups[condition]
#path of the main condition
dir<-list.dirs(recursive = F,path =path_of_condition )
#####
number_of_movies<-length(dir)
if(with_Angelsub == TRUE){
name_of_mat<-"AllinteractionWithAngelsub.mat"
}else{
name_of_mat<-"Allinteraction.mat"
}
########loop of each movie
all_movie_component<-NULL
for(num_of_movie in 1:number_of_movies){
#if the mat file is not existing
filepath<-paste0(dir[num_of_movie], '/',name_of_mat)
#if the component size csv is not exisitng
filepath_csv_component<-paste0(dir[num_of_movie], '/',"componentSize.csv")
if(!(file.exists(filepath))){
stop("Allinteraction.mat does not exist!!!please creat it with MainInteractionAllAngelSub.m ")
}
#if the component csv not exist creat it
if(!(file.exists(filepath_csv_component))){
#####orgenaizing the data for analysis
mat <- (readMat(paste0(dir[num_of_movie], '/',name_of_mat)))
#find how many flys in each movie - it should be 10 but sometimes its less
number_of_flys<-sqrt(length(mat[["new.interactionFrameMatrix"]]))
if(number_of_flys!=10){
stop("the number of flys is not 10,please check if it effect the script somehow and why its not 10")
}
#read each MAT file by the number of flys
sub_list_mat<-matrix(mat[["new.interactionFrameMatrix"]],nrow = number_of_flys, ncol = number_of_flys)
df_mat<-as.data.frame(sub_list_mat)
for(i in 1:ncol(df_mat)){
for(j in 1:nrow(df_mat)){
if(length(unlist(df_mat[i,j])) == 0){
df_mat[i,j] <- lapply(df_mat[i,j], function(x)x[lengths(x) == 0] <- 0)
}
}
}
df_mat<-na.omit(df_mat)
#creat the df with the name of each fly for consistancy
colnames(df_mat)<-c(1:number_of_flys)
rownames(df_mat)<-c(1:number_of_flys)
####
#####get the subscripts of calcualtion
path_to_sub_Scripts<-"C:/Users/lital/OneDrive - Bar Ilan University/Lital/code/interactions_network/dynamic/sub_scripts"
setwd(path_to_sub_Scripts)
files.sources = list.files()
sapply(files.sources, source)
#####
####get who interacting with who and at what frames
all<-data.frame()
all<-all_frames_interaction_above(number_of_flys,sub_list_mat,df_mat)
#for the acasct every interaction mean 1
all<-cbind(all,1)
#####
#####creat network for each frame to claculate the component (cc is compnent)
component_sizes<-NULL
for(i in 1:(length(numbers)-1)){
#get net and subnet for component size
current_net<-creat_network(all,i,numbers)
sub_current_net<-biggest_cc_subgraph(current_net)
if(sub_current_net[[2]] == FALSE){
# no sub cluster bigger than 3
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current = 0
}else{
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current= length(sub_current_net)
}
#####
#####binding the data for dataframe usage
#without the frame number becuase when we do it for multipul movies we want to cbind and than do melt
tmp<-data.frame(size_cc = size_of_biggest_cc_current)
component_sizes<-rbind(component_sizes,tmp)
print(i)
#####
}
#writing to csv to save claulating time
write.csv(component_sizes,paste0(dir[num_of_movie],"/","componentSize.csv"), row.names = FALSE)
print(num_of_movie)
#if the component do exist
}else{
print("file component is already exist,using him")
#reading existing csv
component_sizes<- read.csv(filepath_csv_component)
print(num_of_movie)
}
#binding to colums to do melt at the end
all_movie_component<-bind_cols(all_movie_component,component_sizes)
}
########end loop all movies
colnames(all_movie_component)<-1:length(all_movie_component)
coponent_Size<-3
find_index_bigger_than <- function(x) {
min(which(x>coponent_Size))
}
#without frames
frames_bigger_than_component<-as.data.frame(apply(all_movie_component, 2, find_index_bigger_than))
colnames(frames_bigger_than_component)<-"frames"
frames_bigger_than_component[frames_bigger_than_component == Inf]<-(27000)
tmp_for_statistic<-as.data.frame(t(frames_bigger_than_component$frames))
tmp_for_statistic$name<-basename(path_of_condition)
all_for_stat<-bind_rows(all_for_stat,tmp_for_statistic)
#component_bigger_than_1_divied<-round((1/frames_bigger_than_component),4)
#component_bigger_than__in_Sec<-round(frames_bigger_than_component/30)
#component_bigger_than__in_Sec[component_bigger_than__in_Sec == Inf]<-(0)
#colnames(component_bigger_than__in_Sec)<-"seconds"
#colnames(component_bigger_than_1_divied)<-"1/frames"
}
View(all_for_stat)
View(all_for_stat)
View(tmp_for_statistic)
length(all_for_stat)
nrow(all_for_stat)
all_for_stat[1]
all_for_stat[,1]
all_for_stat[1,]
tmp_for_statistic<-as.data.frame((frames_bigger_than_component$frames))
View(tmp_for_statistic)
colname(tmp_for_statistic)<-basename(path_of_condition)
colnames(tmp_for_statistic)<-basename(path_of_condition)
View(tmp_for_statistic)
library(openxlsx)
library(stringr)
library(dplyr)
library(reshape2)
library(igraph)
library(R.matlab)
library(dplyr)
library(ggplot2)
library(zoo)
library(tidyr)
all_for_stat<-NULL
all_condtion_se_and_mean<-NULL
main_path<-"D:/EX5_6"
list_of_all_groups<-list.dirs(path = main_path, full.names = TRUE, recursive = FALSE)
f <- function(x) {
if(is.list(x)) lapply(x, f)
else ifelse(length(x) == 0, 0, x)
}
####paramters setting
length_of_movie<-27000
#how many frame in a batch
number_of_frame<-1
#number of movies to analys
#seq by the  number of frames
numbers<-seq(1, length_of_movie, by=number_of_frame)
#use the data of interaction that used angelsub
with_Angelsub<-FALSE
#length(order_of_paths)
all_conditions_avarge<-NULL
for(condition in 1:length(list_of_all_groups)){
path_of_condition<-list_of_all_groups[condition]
#path of the main condition
dir<-list.dirs(recursive = F,path =path_of_condition )
#####
number_of_movies<-length(dir)
if(with_Angelsub == TRUE){
name_of_mat<-"AllinteractionWithAngelsub.mat"
}else{
name_of_mat<-"Allinteraction.mat"
}
########loop of each movie
all_movie_component<-NULL
for(num_of_movie in 1:number_of_movies){
#if the mat file is not existing
filepath<-paste0(dir[num_of_movie], '/',name_of_mat)
#if the component size csv is not exisitng
filepath_csv_component<-paste0(dir[num_of_movie], '/',"componentSize.csv")
if(!(file.exists(filepath))){
stop("Allinteraction.mat does not exist!!!please creat it with MainInteractionAllAngelSub.m ")
}
#if the component csv not exist creat it
if(!(file.exists(filepath_csv_component))){
#####orgenaizing the data for analysis
mat <- (readMat(paste0(dir[num_of_movie], '/',name_of_mat)))
#find how many flys in each movie - it should be 10 but sometimes its less
number_of_flys<-sqrt(length(mat[["new.interactionFrameMatrix"]]))
if(number_of_flys!=10){
stop("the number of flys is not 10,please check if it effect the script somehow and why its not 10")
}
#read each MAT file by the number of flys
sub_list_mat<-matrix(mat[["new.interactionFrameMatrix"]],nrow = number_of_flys, ncol = number_of_flys)
df_mat<-as.data.frame(sub_list_mat)
for(i in 1:ncol(df_mat)){
for(j in 1:nrow(df_mat)){
if(length(unlist(df_mat[i,j])) == 0){
df_mat[i,j] <- lapply(df_mat[i,j], function(x)x[lengths(x) == 0] <- 0)
}
}
}
df_mat<-na.omit(df_mat)
#creat the df with the name of each fly for consistancy
colnames(df_mat)<-c(1:number_of_flys)
rownames(df_mat)<-c(1:number_of_flys)
####
#####get the subscripts of calcualtion
path_to_sub_Scripts<-"C:/Users/lital/OneDrive - Bar Ilan University/Lital/code/interactions_network/dynamic/sub_scripts"
setwd(path_to_sub_Scripts)
files.sources = list.files()
sapply(files.sources, source)
#####
####get who interacting with who and at what frames
all<-data.frame()
all<-all_frames_interaction_above(number_of_flys,sub_list_mat,df_mat)
#for the acasct every interaction mean 1
all<-cbind(all,1)
#####
#####creat network for each frame to claculate the component (cc is compnent)
component_sizes<-NULL
for(i in 1:(length(numbers)-1)){
#get net and subnet for component size
current_net<-creat_network(all,i,numbers)
sub_current_net<-biggest_cc_subgraph(current_net)
if(sub_current_net[[2]] == FALSE){
# no sub cluster bigger than 3
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current = 0
}else{
sub_current_net<-(sub_current_net[[1]])
size_of_biggest_cc_current= length(sub_current_net)
}
#####
#####binding the data for dataframe usage
#without the frame number becuase when we do it for multipul movies we want to cbind and than do melt
tmp<-data.frame(size_cc = size_of_biggest_cc_current)
component_sizes<-rbind(component_sizes,tmp)
print(i)
#####
}
#writing to csv to save claulating time
write.csv(component_sizes,paste0(dir[num_of_movie],"/","componentSize.csv"), row.names = FALSE)
print(num_of_movie)
#if the component do exist
}else{
print("file component is already exist,using him")
#reading existing csv
component_sizes<- read.csv(filepath_csv_component)
print(num_of_movie)
}
#binding to colums to do melt at the end
all_movie_component<-bind_cols(all_movie_component,component_sizes)
}
########end loop all movies
colnames(all_movie_component)<-1:length(all_movie_component)
coponent_Size<-3
find_index_bigger_than <- function(x) {
min(which(x>coponent_Size))
}
#without frames
frames_bigger_than_component<-as.data.frame(apply(all_movie_component, 2, find_index_bigger_than))
colnames(frames_bigger_than_component)<-"frames"
frames_bigger_than_component[frames_bigger_than_component == Inf]<-(27000)
tmp_for_statistic<-as.data.frame((frames_bigger_than_component$frames))
colnames(tmp_for_statistic)<-basename(path_of_condition)
all_for_stat<-bind_cols(all_for_stat,tmp_for_statistic)
#component_bigger_than_1_divied<-round((1/frames_bigger_than_component),4)
#component_bigger_than__in_Sec<-round(frames_bigger_than_component/30)
#component_bigger_than__in_Sec[component_bigger_than__in_Sec == Inf]<-(0)
#colnames(component_bigger_than__in_Sec)<-"seconds"
#colnames(component_bigger_than_1_divied)<-"1/frames"
}
View(all_for_stat)
length(all_for_stat)
all_for_stat[,1]
all_for_stat[1]
as.vector(all_for_stat[1])
shapiro.test(as.vector(all_for_stat[1])
shapiro.test(as.vector(all_for_stat[1]))
all_for_stat[1]
all_for_stat[1,1]
all_for_stat[1,1:18]
all_for_stat[,1]
as.vector(all_for_stat[,1])
shapiro.test(as.vector(all_for_stat[,1]))
shapiro.test(as.vector(all_for_stat[,1]))$p-value
shapiro.test(as.vector(all_for_stat[,1]))$p_value
test<-shapiro.test(as.vector(all_for_stat[,1]))
View(test)
shapiro.test(as.vector(all_for_stat[,1]))$p.value
View(all_for_stat)
